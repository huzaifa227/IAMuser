name: Create EC2 User and SSH Key

on:
  workflow_dispatch:
    inputs:
      username:
        description: "Linux username to create on EC2"
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  create-user-on-ec2:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Configure AWS Credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::776705051324:role/github-action-role
        aws-region: us-east-1

    - name: Generate SSH key pair
      id: ssh-keygen
      run: |
        USERNAME=${{ github.event.inputs.username }}
        ssh-keygen -t rsa -b 2048 -f "$USERNAME" -N ""
        echo "PRIVATE_KEY=$(base64 -w 0 $USERNAME)" >> $GITHUB_ENV
        echo "PUBLIC_KEY=$(base64 -w 0 $USERNAME.pub)" >> $GITHUB_ENV
        echo "KEY_FILE=$USERNAME" >> $GITHUB_ENV


    - name: Store keys in AWS Secrets Manager
      run: |
        SECRET_NAME="test"

        aws secretsmanager create-secret --name "$SECRET_NAME" --secret-string '{}' 2>/dev/null || echo "Secret already exists."

        aws secretsmanager put-secret-value \
          --secret-id "$SECRET_NAME" \
          --secret-string "{\"private_key\": \"${{ env.PRIVATE_KEY }}\", \"public_key\": \"${{ env.PUBLIC_KEY }}\"}"

    - name: Find EC2 Instance ID
      id: find-ec2
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=my-ec2-tag" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].InstanceId" --output text)
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

    - name: Send command via SSM to create user and configure SSH
      run: |
        USERNAME=${{ github.event.inputs.username }}
        PUBLIC_KEY_CONTENT=$(base64 -d <<< "${{ env.PUBLIC_KEY }}")

        aws ssm send-command \
          --instance-ids "${{ env.INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Create user and add SSH key" \
          --parameters 'commands=[
            "sudo useradd -m '"$USERNAME"' || true",
            "sudo mkdir -p /home/'"$USERNAME"'/.ssh",
            "echo '"$PUBLIC_KEY_CONTENT"' | sudo tee /home/'"$USERNAME"'/.ssh/authorized_keys",
            "sudo chown -R '"$USERNAME"':'"$USERNAME"' /home/'"$USERNAME"'/.ssh",
            "sudo chmod 700 /home/'"$USERNAME"'/.ssh",
            "sudo chmod 600 /home/'"$USERNAME"'/.ssh/authorized_keys"
          ]' \
          --region us-east-1 \
          --output text

    - name: Upload private key for download
      uses: actions/upload-artifact@v4
      with:
        name: ec2-private-key-${{ github.event.inputs.username }}
        path: ${{ env.KEY_FILE }}

